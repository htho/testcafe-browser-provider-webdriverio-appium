// @ts-check
import { remote } from 'webdriverio'
import path from 'path'

export default {
    /** @type {import("../types").TcWdioAppiumConfig} */
    _config: { },

    /** @type {Record<string, WebdriverIO.Browser>} */
    _browser: {},

    /** Multiple browsers support */
    isMultiBrowser: true,

    /** Runs the specified browser and opens the specified page in it.
     * 
     * required by TestCafe
     * 
     * @param {string} id A unique identifier generated by TestCafe that you can use to identify a browser window.
     * The identifier is included to the window title exposed using the `document.title` property.
     * @param {string} url The url of the page to open.
     * @param {string} browserName The browser name.
     */
    async openBrowser(id, url, browserName) {
        this._browser[id] = await remote(this._config[browserName]);
        await this._browser[id].url(url);
    },

    /** Closes the specified browser. 
     * 
     * required by TestCafe
     * 
     * @param {string} id A unique identifier generated by TestCafe that you can use to identify a browser window.
     */
    async closeBrowser(id) {
        await this._browser[id].deleteSession();
        delete this._browser[id];
    },

    /** Performs initialization actions the provider may require.
     * This method is called once before other provider methods are called.
     * 
     * For example, the Nightmare browser provider uses this method to create a Nightmare instance.
     * 
     * optional for TestCafe
     * 
     * This implementation creates the browser list here.
     */
    async init() {
        const file = "file://" + path.join(process.cwd(), "tcwdioappium.config.mjs");
        const module = await import(file);
        this._config = module.default;
    },

    // /** Performs cleanup actions for the provider data.
    //  * This method is called before the testcafe process is finished.
    //  *
    //  * optional for TestCafe
    //  */
    // async dispose () {
    // },

    /** Returns the array of names used to identify the browsers.
     * 
     * This method is used if the provider supports multiple browsers.
     * 
     * optional for TestCafe
     * 
     * @returns {Promise<string[]>}
     */
    async getBrowserList() {
        return Object.keys(this._config);
    },

    /** Checks if the specified browser name exists.
     * 
     * This method is used if the provider supports multiple browsers.
     * 
     * optional for TestCafe
     * 
     * @param {string} browserName The browser name to validate.
     * @returns {Promise<boolean>} true if the specified name exists, or false otherwise.
     */
    async isValidBrowserName(browserName) {
        return (browserName in this._config);
    },

    /** Resizes the browser window's client area to the specified width and height.
     * 
     * optional extra for TestCafe
     * 
     * @param {string} id A unique identifier generated by TestCafe that you can use to identify a browser window.
     * @param {number} width The width to resize the browser window's client area to, in pixels.
     * @param {number} height The height to resize the browser window's client area to, in pixels.
     * @param {number} currentWidth The actual width of the browser window's client area, in pixels.
     * For example, you can use this parameter to calculate the current width of the browser's utility area
     * that contains menus, toolbars, etc. This can be useful when you need to resize the whole browser window.
     * @param {number} currentHeight The actual height of the browser window's client area, in pixels.
     * For example, you can use this parameter to calculate the current height of the browser's utility area
     * that contains menus, toolbars, etc. This can be useful when you need to resize the whole browser window.
     */
    async resizeWindow(id, width, height, currentWidth, currentHeight) {
        if (this._isFixedSizedDevice(id)) {
            await this._browser[id].rotateDevice(0, 0, width > height ? 90 : 0);
            return;
        }
        await this._resizeWindow(id, width, height, currentWidth, currentHeight);

        // sometimes at this point innerHeight is off by one px
        const currentClientAreaSize = await this._getCurrentClientAreaSize(id);
        if (currentClientAreaSize.width === width && currentClientAreaSize.height === height) return;

        await this._resizeWindow(id, width, height, currentClientAreaSize.width, currentClientAreaSize.height);
    },

    /** @param {string} id */
    _isFixedSizedDevice(id) {
        /** @type {{platformName?: string}} */
        const capabilities = /** @type {any} */ (this._browser[id].capabilities);
        /** @type {string | undefined} */
        const platformName = capabilities.platformName;
        if (platformName === undefined) return false;
        if (platformName.toLowerCase() === "ios") true;
        return false;
    },

    /** @param {string} id */
    async _getCurrentClientAreaSize(id) {
        return this._browser[id].execute(() => ({
            width: window.innerWidth,
            height: window.innerHeight
        }));
    },

    /** Resizes the browser window's client area to the specified width and height.
     * 
     * optional extra for TestCafe
     * 
     * @param {string} id A unique identifier generated by TestCafe that you can use to identify a browser window.
     * @param {number} width The width to resize the browser window's client area to, in pixels.
     * @param {number} height The height to resize the browser window's client area to, in pixels.
     * @param {number} currentWidth The actual width of the browser window's client area, in pixels.
     * For example, you can use this parameter to calculate the current width of the browser's utility area
     * that contains menus, toolbars, etc. This can be useful when you need to resize the whole browser window.
     * @param {number} currentHeight The actual height of the browser window's client area, in pixels.
     * For example, you can use this parameter to calculate the current height of the browser's utility area
     * that contains menus, toolbars, etc. This can be useful when you need to resize the whole browser window.
     */
    async _resizeWindow(id, width, height, currentWidth, currentHeight) {
        console.log("_resizeWindow", {id, width, height, currentWidth, currentHeight})

        // implementation based on
        // https://github.com/DevExpress/testcafe-browser-tools/blob/master/src/api/resize.js

        const currentClientAreaSize = { width: currentWidth, height: currentHeight };

        const currentWindowSize = await this._browser[id].getWindowSize() ?? { ...currentClientAreaSize };

        const requestedSize = { width, height };

        const chrome = {
            width: currentWindowSize.width - currentClientAreaSize.width,
            height: currentWindowSize.height - currentClientAreaSize.height,
        };

        const correctedSize = {
            width: requestedSize.width + chrome.width,
            height: requestedSize.height + chrome.height,
        };

        await this._browser[id].setWindowSize(correctedSize.width, correctedSize.height);
    },

    // /** Checks if the browser window can be resized to the specified dimensions.
    //  * 
    //  * optional extra for TestCafe
    //  * 
    //  * @param {string} id A unique identifier generated by TestCafe that you can use to identify a browser window.
    //  * @param {number} width The desired width of the browser window's client area, in pixels.
    //  * @param {number} height The desired height of the browser window's client area, in pixels.
    //  * 
    //  * @returns {Promise<boolean>} true if the window can be resized to the specified width and height, or false otherwise.
    //  */
    // async canResizeWindowToDimensions(id, width, height) {
    //     return true;
    // },

    /** Takes a screenshot of the browser window's client area.
     * 
     * optional extra for TestCafe
     * 
     * @param {string} id A unique identifier generated by TestCafe that you can use to identify a browser window.
     * @param {string} screenshotPath The absolute path to save the screenshots to.
     * @param {number} pageWidth The actual width of the web page opened in the browser, in pixels.
     * @param {number} pageHeight The actual height of the web page opened in the browser, in pixels.
     */
    async takeScreenshot(id, screenshotPath, pageWidth, pageHeight) {
        await this._browser[id].saveScreenshot(screenshotPath);
    },

    /** Maximizes the browser window.
     * 
     * optional extra for TestCafe
     * 
     * @param {string} id A unique identifier generated by TestCafe that you can use to identify a browser window.
     */
    async maximizeWindow(id) {
        await this._browser[id].maximizeWindow();
    }
};
